<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zinidata.eatout.mapper.AgileMarketMapper">
    <select id="getTotUpjongInfo" resultType="com.zinidata.eatout.vo.output.AgileMarketMainOutVO">
        select
            upjong3_cd, upjong3_nm, sum(before_sale_amt) as before_sale_amt, sum(this_sale_amt) as this_sale_amt,
            (sum(this_sale_amt) - sum(before_sale_amt)) as calc_sale_amt,
            round((sum(this_sale_amt) - sum(before_sale_amt) )/ sum(this_sale_amt) * 100,2) as sale_per
        from(
                select
                    yyyymm, a.upjong3_cd, b.upjong3_nm
                     , case when yyyymm = (select max(yyyymm) from tbss_sum_sales_mega_his) then sum(sale_amt) end as this_sale_amt
                     , case when yyyymm != (select max(yyyymm) from tbss_sum_sales_mega_his) then sum(sale_amt) end as before_sale_amt
                from tbss_sum_sales_mega_his a, tb_upjong3 b
                where 1=1
                  and a.upjong3_cd = b.upjong3_cd
                  and yyyymm between to_char(to_date((select max(yyyymm) from tbss_sum_sales_mega_his),'YYYYMM') + interval '-1 month','YYYYMM') and (select max(yyyymm) from tbss_sum_sales_mega_his)
                  and b.upjong3_cd like 'Q%'
                group by
                    1,2,3
            )
        group by
            1,2
    </select>
    <select id="getAdmiUpjongInfo" resultType="com.zinidata.eatout.vo.output.AgileMarketMainOutVO">
        select
            *
        from(
            select
                mega_cd,mega_nm,upjong3_cd,upjong3_nm
                <if test='outeatType == "sales"'>
                    ,row_number() over(partition by mega_cd order by sale_per
                        <if test='outeatOrderType=="asc"'>
                            asc
                        </if>
                        <if test='outeatOrderType=="desc"'>
                            desc
                        </if>
                    ) as rnk
                    ,before_sale_amt, this_sale_amt
                    ,sale_per as calc_per
                </if>
                <if test='outeatType == "store"'>
                    ,row_number() over(partition by mega_cd order by store_per
                        <if test='outeatOrderType=="asc"'>
                            asc
                        </if>
                        <if test='outeatOrderType=="desc"'>
                            desc
                        </if>
                    ) as rnk
                    ,before_store_cnt, this_store_cnt
                    ,store_per as calc_per
                </if>
            from(
                select
                    mega_cd,mega_nm, upjong3_cd, upjong3_nm
                    , sum(before_sale_amt) as before_sale_amt, sum(this_sale_amt) as this_sale_amt
                    , sum(before_store_cnt) as before_store_cnt, sum(this_store_cnt) as this_store_cnt
                    ,(
                        (case when sum(this_sale_amt) is null then 0 else sum(this_sale_amt) end) -
                        (case when sum(before_sale_amt) is null then 0 else sum(before_sale_amt) end)
                    ) as calc_sale_amt
                    ,round(
                        (
                        (case when sum(this_sale_amt) is null then 0 else sum(this_sale_amt) end) -
                        (case when sum(before_sale_amt) is null then 0 else sum(before_sale_amt) end)
                        )/ (case when sum(this_sale_amt) is null then 0.1 else sum(this_sale_amt) end) * 100,2
                    ) as sale_per
                    ,(
                        (case when sum(this_store_cnt) is null then 0 else sum(this_store_cnt) end) -
                        (case when sum(before_store_cnt) is null then 0 else sum(before_store_cnt) end)
                        ) as calc_store_cnt
                    ,round(
                        (
                        (case when sum(this_store_cnt) is null then 0 else sum(this_store_cnt) end) -
                        (case when sum(before_store_cnt) is null then 0 else sum(before_store_cnt) end)
                        )/ (case when sum(this_store_cnt) is null then 0.1 else sum(this_store_cnt) end) * 100,2
                    ) as store_per
                from(
                    select
                        a.mega_cd, c.mega_nm, a.upjong3_cd, b.upjong3_nm
                        , case when yyyymm = (select max(yyyymm) from tbss_sum_sales_mega_his) then sum(sale_amt) end as this_sale_amt
                        , case when yyyymm != (select max(yyyymm) from tbss_sum_sales_mega_his) then sum(sale_amt) end as before_sale_amt
                        , case when yyyymm = (select max(yyyymm) from tbss_sum_sales_mega_his) then sum(store_cnt) end as this_store_cnt
                        , case when yyyymm != (select max(yyyymm) from tbss_sum_sales_mega_his) then sum(store_cnt) end as before_store_cnt
                    from tbss_sum_sales_mega_his a, tb_upjong3 b, tbadm_mega c
                    where 1=1
                        and a.upjong3_cd = b.upjong3_cd
                        and a.mega_cd = c.mega_cd
                        and yyyymm in (
                            to_char(to_date((select max(yyyymm) from tbss_sum_sales_mega_his),'YYYYMM') + interval '-${outeatDateType} month','YYYYMM')
                            ,(select max(yyyymm) from tbss_sum_sales_mega_his)
                        )
                        and b.upjong3_cd like 'Q%'
                        and b.svc_yn = 'Y'
                    group by
                        1,2,3,4, yyyymm
                    order by this_sale_amt desc
                )
                where  1=1
                group by
                    1,2,3,4
            )
            where 1=1
                and (before_sale_amt is not null and this_sale_amt is not null)
        )
        where 1=1
            and
            <![CDATA[
                rnk <= 5
            ]]>
    </select>
    <select id="getUpjongGrowth" resultType="com.zinidata.eatout.vo.output.AgileMarketMainOutVO">
        select
            upjong3_cd,upjong3_nm
            ,before_sale_amt, this_sale_amt
            ,ROUND((this_sale_amt - before_sale_amt)/10000,0) as calc_sale_amt
            ,row_number() over(order by sale_per desc) as rnk
		    ,sale_per
        from(
            select
                upjong3_cd, upjong3_nm
                 , sum(before_sale_amt) as before_sale_amt, sum(this_sale_amt) as this_sale_amt
                 ,(
                    (case when sum(this_sale_amt) is null then 0 else sum(this_sale_amt) end) -
                    (case when sum(before_sale_amt) is null then 0 else sum(before_sale_amt) end)
                ) as calc_sale_amt
                 ,round(
                            (
                                    (case when sum(this_sale_amt) is null then 0 else sum(this_sale_amt) end) -
                                    (case when sum(before_sale_amt) is null then 0 else sum(before_sale_amt) end)
                                )/ (case when sum(this_sale_amt) is null then 0.1 else sum(this_sale_amt) end) * 100,2
                ) as sale_per
            from(
                    select
                        a.upjong3_cd, b.upjong3_nm
                         , case when yyyymm = (select max(yyyymm) from tbss_sum_sales_mega_his) then sum(sale_amt) end as this_sale_amt
                         , case when yyyymm != (select max(yyyymm) from tbss_sum_sales_mega_his) then sum(sale_amt) end as before_sale_amt
                    from tbss_sum_sales_mega_his a, tb_upjong3 b, tbadm_mega c
                    where 1=1
                        and a.upjong3_cd = b.upjong3_cd
                        and a.mega_cd = c.mega_cd
                        and yyyymm in (
                            to_char(to_date((select max(yyyymm) from tbss_sum_sales_mega_his),'YYYYMM') + interval '-${outeatDateType} month','YYYYMM')
                            ,(select max(yyyymm) from tbss_sum_sales_mega_his)
                        )
                        and b.upjong3_cd like 'Q%'
                        and b.svc_yn = 'Y'
                    group by
                        1,2,yyyymm
                    order by this_sale_amt desc
                )
            where  1=1
            group by
                1,2
        )
        where 1=1
          and (before_sale_amt is not null and this_sale_amt is not null)
            limit 10
    </select>
    <select id="getUpjongDetail" resultType="com.zinidata.eatout.vo.output.AgileMarketMainOutVO">
        select
            a.yyyymm, sum(a.sale_amt) as e_sale_amt, sum(b.sale_amt)  as d_sale_amt, sum(a.store_cnt) as store_cnt, ROUND(((sum(a.sale_amt) + sum(b.sale_amt))/sum(a.store_cnt)),0) as store_amt
        from tbss_sum_sales_mega_his a, tbkb_sum_sales_mega_his b, tb_upjong3 c
        where 1=1
            and a.yyyymm = b.yyyymm
            and a.upjong3_cd = b.upjong3_cd
            and a.mega_cd = b.mega_cd
            and a.bupin_gb = b.bupin_gb
            and a.yyyymm between to_char(
                to_date((select max(yyyymm) from tbss_sum_sales_mega_his),'YYYYMM') + interval '-12 month','YYYYMM')
                and (select max(yyyymm) from tbss_sum_sales_mega_his
            )
            and a.upjong3_cd = #{upjong3Cd}
            and c.svc_yn = 'Y'
        group by
            1
    </select>
    <insert id="setFileInfo">
        insert into tbagile_filelist (file_ori_nm,file_nm,file_info,reg_date)
        values(#{fileOriName},#{fileName},#{fileInfo},now());
        commit;
    </insert>
    <select id="getFileInfo" resultType="com.zinidata.eatout.vo.AgileFileVO">
        select
            file_no, file_ori_nm, file_nm,file_info,reg_date
        from
            tbagile_filelist
        limit 5 offset ${startNum}
    </select>
</mapper>