<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zinidata.eatout.mapper.AgileMainMapper">


    <select id="getYyyymm" resultType="String">
        select max(yyyymm) as yyyymm from cmapap.tbss_ag_sum_sales_mega_his
    </select>

    <select id="getAdmiList" resultType="com.zinidata.eatout.vo.output.AgileAdmiOutVO">
        select
        <if test='admGb == "1"'>
            a.mega_cd as area_cd, a.mega_nm as area_nm
        </if>
        <if test='admGb == "2"'>
            b.cty_cd as area_cd, b.cty_nm as area_nm
        </if>
        <if test='admGb == "3"'>
            c.admi_cd as area_cd, c.admi_nm as area_nm
        </if>
        from
            cmapap.tbadm_mega a, cmapap.tbadm_cty b, cmapap.tbadm_admi c
        where 1=1
            and a.mega_cd = b.mega_cd
            and b.cty_cd = c.cty_cd
        <if test='admGb == "2"'>
            and a.mega_cd = #{areaCd}
        </if>
        <if test='admGb == "3"'>
            and b.cty_cd = #{areaCd}
        </if>
        group by
            1,2
        order by
        <if test='admGb == "1"'>
            a.mega_cd
        </if>
        <if test='admGb == "2"'>
            b.cty_cd
        </if>
        <if test='admGb == "3"'>
            c.admi_cd
        </if>
    </select>
    <select id="getUpjongList" resultType="com.zinidata.eatout.vo.output.AgileUpjongOutVO">
        select
        <if test='upjongType == "2"'>
            b.upjong2_cd as upjong_cd, b.upjong2_nm as upjong_nm
        </if>
        <if test='upjongType == "3"'>
            c.upjong3_cd as upjong_cd, c.upjong3_nm as upjong_nm
        </if>
        from
            cmapap.tb_upjong1 a, cmapap.tb_upjong2 b, cmapap.tb_upjong3 c
        where 1=1
            and a.upjong1_cd = b.upjong1_cd
            and b.upjong2_cd = c.upjong2_cd
        <if test='upjongType == "2"'>
            and b.upjong1_cd = 'Q'
        </if>
        <if test='upjongType == "3"'>
            and c.upjong2_cd = #{upjongCd}
        </if>
            and c.svc_yn = 'Y'
        group by
        1,2
        order by
        <if test='upjongType == "2"'>
            b.upjong2_cd
        </if>
        <if test='upjongType == "3"'>
            c.upjong3_cd
        </if>
    </select>
    <select id="getDateList" resultType="com.zinidata.eatout.vo.output.AgileDateOutVO">
        <if test='dataType != "3"'>
            select
                year,
            <if test='dateType == "1"'>
                year as date,
                concat(year,'년') as date_nm
            </if>
            <if test='dateType == "2"'>
                half as date,
                case when half = 1 then concat(year,'년 하반기') else concat(year,'년 상반기') end as date_nm
            </if>
            <if test='dateType == "3"'>
                quarter as date,
                concat(year,'년 ',quarter,'분기') as date_nm
            </if>
            <if test='dateType == "4"'>
                month as date,
                concat(substring(yyyymm,1,4),'년 ',substring(yyyymm,5,2),'월') as date_nm
            </if>
            from(
                select
                substring(yyyymm::varchar,1,4) as year
                <![CDATA[
                    , case when date_part('QUARTER',yyyymm::timestamp) <= 2 then 1 else 2 end half
                ]]>
                , date_part('QUARTER',yyyymm::timestamp) as quarter
                , to_char(yyyymm,'MM') as month
                , to_char(yyyymm,'YYYYMM') as yyyymm
            from
                <if test='dataType == "1"'>
                    generate_series(to_date(((select min(yyyymm) from cmapap.tbss_ag_sum_sales_mega_his)),'YYYYMM'), to_date((select max(yyyymm) from cmapap.tbss_ag_sum_sales_mega_his),'YYYYMM'),'1 week') yyyymm
               </if>
                <if test='dataType == "2"'>
                    generate_series(to_date(((select min(yyyymm) from cmapap.tbkb_sum_sales_mega_his)),'YYYYMM'), to_date((select max(yyyymm) from cmapap.tbkb_sum_sales_mega_his),'YYYYMM'),'1 week') yyyymm
                </if>
                <if test='dataType == "4"'>
                    generate_series(to_date(((select min(yyyymm) from cmapap.tbpop_livi_mega_his)),'YYYYMM'), to_date((select max(yyyymm) from cmapap.tbpop_livi_mega_his),'YYYYMM'),'1 week') yyyymm
                </if>
                <if test='dataType == "5"'>
                    generate_series(to_date(((select min(yyyymm) from cmapap.tbpop_hous_mega_his)),'YYYYMM'), to_date((select max(yyyymm) from cmapap.tbpop_hous_mega_his),'YYYYMM'),'1 week') yyyymm
                </if>
            order by
                yyyymm desc
            ) tmp
            group by
            <if test='dateType == "1"'>
                1,2
            </if>
            <if test='dateType != "1"'>
                1,2,3
            </if>
            order by
            <if test='dateType == "1"'>
                1,2
            </if>
            <if test='dateType != "1"'>
                1,2,3
            </if>
        </if>
        <if test='dataType == "3"'>
            select
                <if test='dateType == "1"'>
                    substring(a.sale_mm,1,4) as date
                    ,concat(substring(a.sale_mm,1,4),'년') as date_nm
                </if>
                <if test='dateType == "2"'>
                <![CDATA[
                    concat(substring(a.sale_mm,1,4),case when date_part('QUARTER',to_date(sale_mm,'YYYYMM')::timestamp) <= 2 then 1 else 2 end) as date
                    ,concat(substring(a.sale_mm,1,4),'년',case when date_part('QUARTER',to_date(sale_mm,'YYYYMM')::timestamp) <= 2 then '전' else '후' end,'반기') as date_nm
                ]]>
                </if>
                <if test='dateType == "3"'>
                    concat(substring(a.sale_mm,1,4),date_part('QUARTER',to_date(sale_mm,'YYYYMM')::timestamp)) as date
                    ,concat(substring(a.sale_mm,1,4),'년',date_part('QUARTER',to_date(sale_mm,'YYYYMM')::timestamp),'분기') as date_nm
                </if>
                <if test='dateType == "4"'>
                    sale_mm as date
                    ,concat(substring(a.sale_mm,1,4),'년',substring(a.sale_mm,5,6),'월') as date_nm
                </if>
                <if test='dateType == "5"'>
                    sale_mm || week as date
                    ,concat(substring(a.sale_mm,1,4),'년',substring(a.sale_mm,5,6),'월', a.week,'주차') as date_nm
                </if>
            from
                cmapap.tbagile_pos_info a
            group by
                1,2
            order by
                1 desc
        </if>
    </select>
    <select id="getMenuList" resultType="com.zinidata.eatout.vo.output.AgileMenuOutVO">
        select
            <if test='menuType == "1"'>
                a.menu1_cd,a.menu1_nm
            </if>
            <if test='menuType == "2"'>
                b.menu2_cd, b.menu2_nm
             </if>
            <if test='menuType == "3"'>
                c.menu3_cd, c.menu3_nm
            </if>
        from cmapap.tb_menu1 a, cmapap.tb_menu2 b, cmapap.tb_menu3 c
        where 1=1
            and a.menu1_cd = b.menu1_cd
            and b.menu2_cd = c.menu2_cd
            <if test='menuType == "1"'>
                a.menu1_cd = #{menuCd}
            </if>
            <if test='menuType == "2"'>
                b.menu2_cd = #{menuCd}
            </if>
    </select>
    <select id="getMainInfo" resultType="com.zinidata.eatout.vo.output.AgileMainOutVO">
        with tmp_date as(
            select
                row_number() over(order by yyyymm) as row
                , to_char(yyyymm,'YYYYMM') as yyyymm
                , substring(yyyymm::varchar,1,4) as year
                , to_char(yyyymm,'MM')::numeric as month
                , date_part('QUARTER',yyyymm::timestamp) as quarter
                <![CDATA[
               , case when date_part('QUARTER',yyyymm::timestamp) <= 2 then 1 else 2 end half
               ]]>
                , case when row_number() over(order by yyyymm) = 13 then 1 else 0 end as this_month
                , case when row_number() over(order by yyyymm) = 12 then 1 else 0 end as last_month
                , case when row_number() over(order by yyyymm) between 10 and 13 then 1 else 0 end as last_quarter
                , case when row_number() over(order by yyyymm) between 6 and 13 then 1 else 0 end as last_half
            from
            generate_series(
                to_date(#{yyyymm},'yyyymm') - '12 month'::interval,to_date(#{yyyymm},'yyyymm'),'1 month'
            ) yyyymm
        )
        select
            --	sum(this_sales_amt), sum(last_sales_amt),
            round(((sum(this_sales_amt) / sum(last_sales_amt)) * 100)- 100,2) as calc_amt
            ,#{yyyymm} as yyyymm
        from(
            select
                case when row = 1 then sale_amt end as this_sales_amt
                ,case when row = 2 then sale_amt end as last_sales_amt
            from(
                select
                    row_number() over(order by year desc, quarter desc) as row, year, quarter
                    ,sum(a.sale_amt) as sale_amt
                from
                    cmapap.tbss_ag_sum_sales_mega_his a, tmp_date b
                where 1=1
                    and a.yyyymm = b.yyyymm
                group by
                    2,3
                limit 2
            ) tmp
        ) tmp
    </select>
    <select id="getFoundationCalc" resultType="com.zinidata.eatout.vo.output.AgileFoundationCalcOutVO">
        select
            tmp.*
            --	손익분기점
            ,ROUND(total2/30) as cost7
            ,ROUND(total2/30*10000/${dangaCost}) as cost8
            --	사업타당성 지표(투자비 대비월 3% 수익률)
            ,ROUND(((${toojaCost1}+${toojaCost2}+${toojaCost5})*0.03+tmp.total1)/0.93) as cost9
            ,ROUND(((${toojaCost1}+${toojaCost2}+${toojaCost5})*0.03+tmp.total1)/0.93/30) as cost10
            ,ROUND(((${toojaCost1}+${toojaCost2}+${toojaCost5})*0.03+tmp.total1)/0.93/30*10000/${dangaCost}) as cost11
            --	사업타당성 지표(투자비 대비월 3% 수익률)
            ,ROUND(((${toojaCost1}+${toojaCost2}+${toojaCost5})*0.042+tmp.total1)/0.93) as cost12
            ,ROUND(((${toojaCost1}+${toojaCost2}+${toojaCost5})*0.042+tmp.total1)/0.93/30) as cost13
            ,ROUND(((${toojaCost1}+${toojaCost2}+${toojaCost5})*0.042+tmp.total1)/0.93/30*10000/${dangaCost}) as cost14
        from(
                select
                    cost1,cost2,cost3,cost4
                     ,ROUND(cost1+cost2+cost3+cost4) as sum1
                     ,cost5,cost6
                     ,ROUND(cost5 + cost6) as sum2
                     ,ROUND(cost1+cost2+cost3+cost4+cost5+cost6) as total1
                     ,ROUND((cost1+cost2+cost3+cost4+cost5+cost6)/0.93) as total2
                from(
                        select
                            ${operCost1} as cost1
                             ,(${operCost2}*0.9) as cost2
                             ,ROUND(((${toojaCost1}+${toojaCost5})/(${toojaCost6}*12))
                            +((${toojaCost1} + ${toojaCost2} + ${toojaCost5})*0.02/12)
                            +(${toojaCost3}* ${toojaCost4}*0.01/12)
                              ) as cost3
                             ,${operCost4} as cost4
                             ,${operCost3} as cost5
                             ,(${operCost2}*0.1) as cost6
--                         from dual
                    ) tmp
            ) tmp
    </select>
</mapper>