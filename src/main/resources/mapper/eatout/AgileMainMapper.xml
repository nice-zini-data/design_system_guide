<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zinidata.eatout.mapper.AgileMainMapper">

    <select id="getCertCnt" resultType="integer">
    </select>

<!--    <select id="getCertSeqNo" resultType="com.zinidata.eatout.vo.AgileCertVO">-->
<!--        select nextval('em_tran_pr') as seqNo-->
<!--    </select>-->

    <insert id="setCert">
        insert into em_tran (tran_pr, tran_phone, tran_callback, tran_status, tran_date, tran_msg, tran_type)
        values(#{seqNo}, #{mobileNo}, #{tranCallback}, '1', now(), #{tranMsg}, 4)
    </insert>

    <insert id="setCellPhoneCert">
        insert into tb_cellphone_cert (seq, name, mobile_no, cert_no, ip_addr)
        values(#{seqNo}, #{memNm}, #{mobileNo}, #{randomStr}, #{ipAddr})
    </insert>

    <update id="setCertCrtDateUpdate">
        update tb_cellphone_cert
        set cert_dt = now()
        where seq = #{seqNo}
    </update>

<!--    <select id="getCertInfo" resultType="com.zinidata.eatout.vo.AgileCertVO">-->
<!--        select name as mem_nm-->
<!--            , mobile_no-->
<!--            , cert_no-->
<!--        from tb_cellphone_cert-->
<!--        where seq = #{seqNo}-->
<!--    </select>-->
    <select id="getSubscribe" resultType="integer">
        select count(*) as cnt
        from tb_subscribe_info
        where mobile_no =#{mobileNo} and mem_nm=#{memNm}
    </select>
    <select id="getYyyymm" resultType="String">
        select max(yyyymm) as yyyymm from tbss_sum_sales_mega_his
    </select>

    <insert id="setSubscribeIns">
        insert into tb_subscribe_info
            (mobile_no,mem_nm,mem_type,interest_areacd,interest_upjong,personal_info,marketing_info)
        values (#{mobileNo},#{memNm},#{memType},#{interestAreacd},#{interestUpjong},#{personalInfo},#{marketingInfo})
    </insert>

    <update id="setSubscribeUpd">
        update tb_subscribe_info
        set mem_type = #{memType}
        , interest_areacd = #{interestAreacd}
        , interest_upjong = #{interestUpjong}
        , update_date = now()
        , personal_info = #{personalInfo}
        , marketing_info = #{marketingInfo}
    </update>

    <select id="getDataUpdateYn" resultType="com.zinidata.eatout.vo.DataUpdateVO">
        --         !!BigMainMapper.getDataUpdateYn!! --
            select
                    pop_status
                    ,pop_date_s
                    ,pop_date_e
            from tb_update_info
            where pop_gubun = 'nbigeye'
    </select>

    <select id="getAdmiList" resultType="com.zinidata.eatout.vo.output.AgileAdmiOutVO">
        select
        <if test='admGb == "1"'>
            a.mega_cd as area_cd, a.mega_nm as area_nm
        </if>
        <if test='admGb == "2"'>
            b.cty_cd as area_cd, b.cty_nm as area_nm
        </if>
        <if test='admGb == "3"'>
            c.admi_cd as area_cd, c.admi_nm as area_nm
        </if>
        from
            tbadm_mega a,tbadm_cty b, tbadm_admi c
        where 1=1
            and a.mega_cd = b.mega_cd
            and b.cty_cd = c.cty_cd
        <if test='admGb == "2"'>
            and a.mega_cd = #{areaCd}
        </if>
        <if test='admGb == "3"'>
            and b.cty_cd = #{areaCd}
        </if>
        group by
            1,2
        order by
        <if test='admGb == "1"'>
            a.mega_cd
        </if>
        <if test='admGb == "2"'>
            b.cty_cd
        </if>
        <if test='admGb == "3"'>
            c.admi_cd
        </if>
    </select>
    <select id="getUpjongList" resultType="com.zinidata.eatout.vo.output.AgileUpjongOutVO">
        select
        <if test='upjongType == "2"'>
            b.upjong2_cd as upjong_cd, b.upjong2_nm as upjong_nm
        </if>
        <if test='upjongType == "3"'>
            c.upjong3_cd as upjong_cd, c.upjong3_nm as upjong_nm
        </if>
        from
        tb_upjong1 a, tb_upjong2 b, tb_upjong3 c
        where 1=1
            and a.upjong1_cd = b.upjong1_cd
            and b.upjong2_cd = c.upjong2_cd
        <if test='upjongType == "2"'>
            and b.upjong1_cd = 'Q'
        </if>
        <if test='upjongType == "3"'>
            and c.upjong2_cd = #{upjongCd}
        </if>
            and c.svc_yn = 'Y'
        group by
        1,2
        order by
        <if test='upjongType == "2"'>
            b.upjong2_cd
        </if>
        <if test='upjongType == "3"'>
            c.upjong3_cd
        </if>
    </select>
    <select id="getDateList" resultType="com.zinidata.eatout.vo.output.AgileDateOutVO">
        select
        year,
        <if test='dateType == "1"'>
            year as date,
            concat(year,'년') as date_nm
        </if>
        <if test='dateType == "2"'>
            half as date,
            case when half = 1 then concat(year,'년 하반기') else concat(year,'년 상반기') end as date_nm
        </if>
        <if test='dateType == "3"'>
            quarter as date,
            concat(year,'년 ',quarter,'분기') as date_nm
        </if>
        <if test='dateType == "4"'>
            month as date,
            yyyymm as date_nm
        </if>
        <if test='dateType == "5"'>
            week as date,
            concat(year,'년 ',week,'주차') as date_nm
        </if>
        from(
            select
                substring(yyyymm::varchar,1,4) as year
                <![CDATA[
                    , case when date_part('QUARTER',yyyymm::timestamp) <= 2 then 1 else 2 end half
                ]]>
                , date_part('QUARTER',yyyymm::timestamp) as quarter
                , to_char(yyyymm,'MM')::numeric as month
                , to_char(yyyymm,'YYYYMM') as yyyymm
                , date_part('WEEK',yyyymm::timestamp) as week
            from
                generate_series(to_date(((select min(yyyymm) from tbss_sum_sales_mega_his)),'YYYYMM'), to_date((select max(yyyymm) from tbss_sum_sales_mega_his),'YYYYMM'),'1 week') yyyymm
            order by
                yyyymm desc
        ) tmp
        group by
        <if test='dateType == "1"'>
            1,2
        </if>
        <if test='dateType != "1"'>
            1,2,3
        </if>
        order by
        <if test='dateType == "1"'>
            1,2
        </if>
        <if test='dateType != "1"'>
            1,2,3
        </if>
    </select>
    <select id="getMenuList" resultType="com.zinidata.eatout.vo.output.AgileMenuOutVO">
        select
            <if test='menuType == "1"'>
                a.menu1_cd,a.menu1_nm
            </if>
            <if test='menuType == "2"'>
                b.menu2_cd, b.menu2_nm
             </if>
            <if test='menuType == "3"'>
                c.menu3_cd, c.menu3_nm
            </if>
        from tb_menu1 a, tb_menu2 b, tb_menu3 c
        where 1=1
            and a.menu1_cd = b.menu1_cd
            and b.menu2_cd = c.menu2_cd
            <if test='menuType == "1"'>
                a.menu1_cd = #{menuCd}
            </if>
            <if test='menuType == "2"'>
                b.menu2_cd = #{menuCd}
            </if>
    </select>
    <select id="getMainInfo" resultType="com.zinidata.eatout.vo.output.AgileMainOutVO">
        with tmp_date as(
            select
                row_number() over(order by yyyymm) as row
                , to_char(yyyymm,'YYYYMM') as yyyymm
                , substring(yyyymm::varchar,1,4) as year
                , to_char(yyyymm,'MM')::numeric as month
                , date_part('QUARTER',yyyymm::timestamp) as quarter
                <![CDATA[
               , case when date_part('QUARTER',yyyymm::timestamp) <= 2 then 1 else 2 end half
               ]]>
                , case when row_number() over(order by yyyymm) = 13 then 1 else 0 end as this_month
                , case when row_number() over(order by yyyymm) = 12 then 1 else 0 end as last_month
                , case when row_number() over(order by yyyymm) between 10 and 13 then 1 else 0 end as last_quarter
                , case when row_number() over(order by yyyymm) between 6 and 13 then 1 else 0 end as last_half
            from
            generate_series(
                to_date(#{yyyymm},'yyyymm') - '12 month'::interval,to_date(#{yyyymm},'yyyymm'),'1 month'
            ) yyyymm
        )
        select
            --	sum(this_sales_amt), sum(last_sales_amt),
            round(((sum(this_sales_amt) / sum(last_sales_amt)) * 100)- 100,2) as calc_amt
            ,#{yyyymm} as yyyymm
        from(
            select
                case when row = 1 then sale_amt end as this_sales_amt
                ,case when row = 2 then sale_amt end as last_sales_amt
            from(
                select
                    row_number() over(order by year desc, quarter desc) as row, year, quarter
                    ,sum(a.sale_amt) as sale_amt
                from
                    tbss_sum_sales_mega_his a, tmp_date b
                where 1=1
                    and a.yyyymm = b.yyyymm
                group by
                    2,3
                limit 2
            ) tmp
        ) tmp
    </select>
</mapper>